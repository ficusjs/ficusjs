class t{constructor(t,e,s={}){this.namespace=t,this.storage=e,this.options=s,this._init()}_init(){if("performance"in globalThis&&this.options.clearOnReload){const t=globalThis.performance.getEntriesByType("navigation").map((t=>t.type));this.lastUpdated()&&t.includes("reload")&&this.removeState()}}setState(t){t?(this.storage.setItem(`${this.namespace}:state`,this._normalizeState(t)),this.storage.setItem(`${this.namespace}:lastUpdated`,(new Date).getTime().toString())):this.removeState()}_normalizeState(t){return"object"==typeof t&&this.options.saveState&&"function"==typeof this.options.saveState?JSON.stringify(this.options.saveState(t)):"string"!=typeof t?JSON.stringify(t):t}getState(){const t=this.storage.getItem(`${this.namespace}:state`);return t?JSON.parse(t):void 0}lastUpdated(){const t=this.storage.getItem(`${this.namespace}:lastUpdated`);return t?parseInt(t,10):void 0}removeState(){this.storage.removeItem(`${this.namespace}:state`),this.storage.removeItem(`${this.namespace}:lastUpdated`)}}function createPersist(e,s="session",a){return new t(e,"local"===s?globalThis.localStorage:globalThis.sessionStorage,a)}class e{constructor(t){const e=this;e.getters={},e.actions={},e.mutations={},e.state={},e.getterCache={},e.status="resting",e.transaction=!1,e.transactionCache={},e.callbacks=[],t.getters&&(e.getters=new Proxy(t.getters||{},{get:(t,s)=>(e.getterCache[s]||(e.getterCache[s]=t[s](e.state)),e.getterCache[s])})),t.actions&&(e.actions=t.actions),t.mutations&&(e.mutations=t.mutations);let s=t.initialState||{};if(e.copyOfInitialState=e._copyValue(s),e.ttl=-1,e.lastUpdatedState={},t.ttl&&(e.ttl=t.ttl,Object.keys(e.copyOfInitialState).forEach((t=>e.lastUpdatedState[t]=(new Date).getTime()))),t.persist){e.persist="string"==typeof t.persist?createPersist(t.persist):t.persist;const a=e.persist.getState(),i=e.persist.lastUpdated();a&&i&&(-1===e.ttl||e._lastUpdatedTimeDiff(i)<e.ttl)&&(s=a)}this._processState(s)}_processState(t){const e=this;e.state=new Proxy(t,{set:(t,s,a)=>(e.transaction&&!e.transactionCache[s]&&(e.transactionCache[s]=e._copyValue(t[s])),t[s]=a,e.lastUpdatedState[s]=(new Date).getTime(),e.getterCache={},e.transaction||(e.persist&&e.persist.setState(e.state),e.status="resting",e._processCallbacks(e.state)),!0),get:(t,s)=>e.ttl>-1&&e._lastUpdatedTimeDiff(e.lastUpdatedState[s])>e.ttl?(e.persist&&e.persist.removeState(),e.copyOfInitialState[s]):t[s]})}_lastUpdatedTimeDiff(t){return Math.round(((new Date).getTime()-t)/1e3)}dispatch(t,e){return"function"!=typeof this.actions[t]?(console.error(`Dude, the store action "${t}" doesn't exist.`),!1):(this.status="action",this.actions[t](this,e))}commit(t,e){if("function"!=typeof this.mutations[t])return console.error(`Dude, the store mutation "${t}" doesn't exist`),!1;this.status="mutation";const s=this.mutations[t](this.state,e);return this.state=s,this.persist&&this.persist.setState(s),!0}_processCallbacks(t){return!(!this.callbacks.length||this.transaction)&&(this.callbacks.forEach((e=>e(t))),!0)}subscribe(t){if("function"!=typeof t)return console.error("Dude, you can only subscribe to store changes with a valid function"),!1;return this.callbacks.push(t),()=>{this.callbacks=this.callbacks.filter((e=>e!==t))}}_copyValue(t){return JSON.parse(JSON.stringify(t))}begin(){this.transactionCache={},this.transaction=!0}end(){this.transaction=!1,this._processCallbacks(this.state)}rollback(){Object.keys(this.transactionCache).forEach((t=>this.state[t]=this.transactionCache[t])),this.end()}clear(t=!0){this.getterCache={},this.transactionCache={},this.lastUpdatedState={},this.persist&&this.persist.removeState(),this.transaction=!0,this.status="clear";const e=this._copyValue(this.copyOfInitialState);for(const t in e)this.state[t]=e[t];this.transaction=!1,this.status="resting",t&&this._processCallbacks(this.state)}}function createStore(t,s){let a=getStore(t);return a||(a=new e(s),console.warn("createStore function is deprecated. Use createAppState and getAppState in v3.3.0 to create stores"),globalThis.__ficusjs__=globalThis.__ficusjs__||{},globalThis.__ficusjs__.store=globalThis.__ficusjs__.store||{},globalThis.__ficusjs__.store[t]=a,a)}function getStore(t){if(console.warn("getStore function is deprecated. Use createAppState and getAppState in v3.3.0 to create stores"),globalThis.__ficusjs__&&globalThis.__ficusjs__.store&&globalThis.__ficusjs__.store[t])return globalThis.__ficusjs__.store[t]}export{createPersist,createStore,getStore};
