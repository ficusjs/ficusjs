function withBreakpointRender(e,t){return{...t,created(){this.setBreakpointConfig(e),t.created&&t.created.call(this)},mounted(){this._addBreakpointListeners(),t.mounted&&t.mounted.call(this)},updated(){this._addBreakpointListeners(),t.updated&&t.updated.call(this)},removed(){this._removeBreakpointListeners(),t.removed&&t.removed.call(this)},_addBreakpointListeners(){const e=this;e._breakpointConfig&&e._breakpointConfig.reactive&&e._breakpointListeners.forEach((e=>{if(!e.listenerSubscribed){const t=window.matchMedia(e.query);t.addEventListener("change",e.listener),e.mediaQueryList=t,e.listenerSubscribed=!0}}))},_removeBreakpointListeners(){const e=this;e._breakpointListeners&&e._breakpointListeners.forEach((e=>{e.mediaQueryList&&(e.mediaQueryList.removeEventListener("change",e.listener),e.listenerSubscribed=!1)}))},setBreakpointConfig(e){const t=this;t._breakpointConfig=e;const n=Object.keys(e.breakpoints).sort(((e,t)=>e-t)),i=n.map(((i,r)=>{let s;0===r?s=`only screen and (max-width: ${i}px)`:r===n.length-1?(s=`only screen and (min-width: ${parseInt(n[r-1],10)+1}px) and (max-width: ${i}px)`,s=`only screen and (min-width: ${parseInt(i,10)+1}px)`):s=`only screen and (min-width: ${parseInt(n[r-1],10)+1}px) and (max-width: ${i}px)`;const a=e.breakpoints[i].method;return{query:s,method:a,listener(e){e.matches&&t[a]&&(t.render=t[a],t._processRender())},mediaQueryList:void 0,listenerSubscribed:!1}}));t._removeBreakpointListeners(),this._breakpointListeners=i,t._addBreakpointListeners(),i.forEach((e=>{e.mediaQueryList.matches&&t[e.method]&&(t.render=t[e.method])}))}}}export{withBreakpointRender};
