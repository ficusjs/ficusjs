function withBreakpointRender(e,t){return{...t,created(){this.setBreakpointConfig(e),t.created&&t.created.call(this)},mounted(){this._addBreakpointListeners(),t.mounted&&t.mounted.call(this)},updated(){this._addBreakpointListeners(),t.updated&&t.updated.call(this)},removed(){this._removeBreakpointListeners(),t.removed&&t.removed.call(this)},_addBreakpointListeners(){const e=this;e._breakpointConfig&&e._breakpointConfig.reactive&&e._breakpointListeners.forEach((e=>{if(!e.listenerSubscribed){const t=window.matchMedia(e.query);t.addEventListener("change",e.listener),e.mediaQueryList=t,e.listenerSubscribed=!0}}))},_removeBreakpointListeners(){const e=this;e._breakpointListeners&&e._breakpointListeners.forEach((e=>{e.mediaQueryList&&(e.mediaQueryList.removeEventListener("change",e.listener),e.listenerSubscribed=!1)}))},setBreakpointConfig(e){const r=this;r._breakpointConfig=e;const i=Object.keys(e.breakpoints).sort(((e,t)=>e-t));if(!t.render)throw new Error("Dude, when using breakpoints, you must provide a 'render' method for the smallest screen size");const n=i.map(((i,n)=>{const s=`only screen and (min-width: ${i}px)`,o=e.breakpoints[i].method;return{query:s,method:o,listener(e){e.matches&&t[o]&&(r.render=t[o],r._processRender())},mediaQueryList:void 0,listenerSubscribed:!1}}));n.unshift({query:`only screen and (max-width: ${i[0]-1}px)`,method:"render",listener(e){e.matches&&(r.render=t.render,r._processRender())},mediaQueryList:void 0,listenerSubscribed:!1}),r._removeBreakpointListeners(),this._breakpointListeners=n,r._addBreakpointListeners(),n.forEach((e=>{e.mediaQueryList.matches&&t[e.method]&&(r.render=t[e.method])}))}}}export{withBreakpointRender};
