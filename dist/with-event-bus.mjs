function withEventBus(s,e){return{...e,created(){this.setEventBus(s),e.created&&e.created.call(this)},mounted(){this._subscribeToEventBus(),e.mounted&&e.mounted.call(this)},updated(){this._subscribeToEventBus(),e.updated&&e.updated.call(this)},removed(){this._unsubscribeFromEventBus(),e.removed&&e.removed.call(this)},setEventBus(s){const e=this;e._eventBus=s,e._eventSubscriptions={},e.eventBus={subscribe:(s,t,n)=>(e._eventSubscriptions[s]={unsubscribe:e._eventBus.subscribe(s,t,n),callback:t,options:n},function(){const{unsubscribe:t}=e._eventSubscriptions[s];t&&t(),e._eventSubscriptions[s].unsubscribe=null}),publish(s,t={}){e._eventBus.publish(s,t)},getSubscribers:s=>e._eventBus.getSubscribers(s)}},_subscribeToEventBus(){for(const s in this._eventSubscriptions){const{unsubscribe:e,callback:t,options:n}=this._eventSubscriptions[s];e||(this._eventSubscriptions[s].unsubscribe=this._eventBus.subscribe(s,t,n))}},_unsubscribeFromEventBus(){for(const s in this._eventSubscriptions){const{unsubscribe:e}=this._eventSubscriptions[s];e&&e(),this._eventSubscriptions[s].unsubscribe=null}}}}export{withEventBus};
